package khanzahmsanjungan;

import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import java.awt.Cursor;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.JOptionPane;

public class DlgRegistrasiWalkIn extends javax.swing.JDialog {
    private final Connection koneksi = koneksiDB.condb();
    private final sekuel query = new sekuel();
    private final validasi valid = new validasi();
    private final DlgCariPoli poli = new DlgCariPoli(null, true);
    private final DlgCariDokter2 dokter = new DlgCariDokter2(null, true);
    private String hari = "",
                   noRawat = "",
                   noReg = "",
                   kodeDokter = "",
                   kodePoli = "",
                   biaya = "",
                   statusDaftar = "Lama",
                   statusPoli = "Baru",
                   umur = "0",
                   statusUmur = "Th",
                   namaPJ = "-",
                   hubunganPJ = "-",
                   alamat = "-";

    public DlgRegistrasiWalkIn(java.awt.Frame parent, boolean id) {
        super(parent, id);
        initComponents();
        poli.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                poliTujuan.setText(poli.getTable().getValueAt(poli.getTable().getSelectedRow(), 1).toString());
                kodePoli = poli.getTable().getValueAt(poli.getTable().getSelectedRow(), 0).toString();
            }
        });
        dokter.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                dokterTujuan.setText(dokter.getTable().getValueAt(dokter.getTable().getSelectedRow(), 1).toString());
                kodeDokter = dokter.getTable().getValueAt(dokter.getTable().getSelectedRow(), 0).toString();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new component.Panel();
        jPanel2 = new component.Panel();
        labelNoRM = new component.Label();
        labelTglPeriksa = new component.Label();
        jLabel31 = new component.Label();
        noRM = new component.Label();
        jLabel32 = new component.Label();
        caraBayar = new widget.ComboBox();
        pilihPoli = new component.Button();
        poliTujuan = new widget.TextBox();
        jLabel36 = new component.Label();
        pilihDokter = new component.Button();
        dokterTujuan = new widget.TextBox();
        labelNamaPasien = new component.Label();
        namaPasien = new component.Label();
        labelTglLahir = new component.Label();
        tglLahir = new component.Label();
        tglPeriksa = new component.Label();
        jPanel3 = new javax.swing.JPanel();
        simpan = new component.Button();
        batal = new component.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new java.awt.BorderLayout(1, 1));

        jPanel1.setBackground(new java.awt.Color(238, 238, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 215, 255)), "PENDAFTARAN POLIKLINIK ONSITE", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Inter", 0, 24), new java.awt.Color(0, 131, 62))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 70));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 1));

        jPanel2.setBackground(new java.awt.Color(238, 238, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(390, 120));
        jPanel2.setLayout(null);

        labelNoRM.setForeground(new java.awt.Color(0, 131, 62));
        labelNoRM.setText("No. Rekam Medis :");
        labelNoRM.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        labelNoRM.setPreferredSize(new java.awt.Dimension(20, 14));
        jPanel2.add(labelNoRM);
        labelNoRM.setBounds(20, 50, 220, 40);

        labelTglPeriksa.setForeground(new java.awt.Color(0, 131, 62));
        labelTglPeriksa.setText("Tgl. Periksa :");
        labelTglPeriksa.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        labelTglPeriksa.setPreferredSize(new java.awt.Dimension(20, 14));
        jPanel2.add(labelTglPeriksa);
        labelTglPeriksa.setBounds(20, 190, 220, 40);

        jLabel31.setForeground(new java.awt.Color(0, 131, 62));
        jLabel31.setText("Poli Tujuan :");
        jLabel31.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        jLabel31.setPreferredSize(new java.awt.Dimension(20, 14));
        jPanel2.add(jLabel31);
        jLabel31.setBounds(20, 230, 220, 40);

        noRM.setForeground(new java.awt.Color(0, 131, 62));
        noRM.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        noRM.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        noRM.setPreferredSize(new java.awt.Dimension(20, 14));
        jPanel2.add(noRM);
        noRM.setBounds(255, 50, 590, 40);

        jLabel32.setForeground(new java.awt.Color(0, 131, 62));
        jLabel32.setText("Dokter Tujuan :");
        jLabel32.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        jLabel32.setPreferredSize(new java.awt.Dimension(20, 14));
        jPanel2.add(jLabel32);
        jLabel32.setBounds(20, 270, 220, 40);

        caraBayar.setForeground(new java.awt.Color(0, 131, 62));
        caraBayar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "UMUM / PERSONAL" }));
        caraBayar.setFont(new java.awt.Font("Inter", 1, 14)); // NOI18N
        jPanel2.add(caraBayar);
        caraBayar.setBounds(255, 310, 520, 40);

        pilihPoli.setForeground(new java.awt.Color(0, 131, 62));
        pilihPoli.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48x48/pilih.png"))); // NOI18N
        pilihPoli.setMnemonic('S');
        pilihPoli.setToolTipText("Alt+S");
        pilihPoli.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        pilihPoli.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        pilihPoli.setPreferredSize(new java.awt.Dimension(300, 45));
        pilihPoli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pilihPoliActionPerformed(evt);
            }
        });
        jPanel2.add(pilihPoli);
        pilihPoli.setBounds(775, 230, 50, 40);

        poliTujuan.setEditable(false);
        poliTujuan.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        poliTujuan.setPreferredSize(new java.awt.Dimension(72, 28));
        jPanel2.add(poliTujuan);
        poliTujuan.setBounds(255, 230, 520, 40);

        jLabel36.setForeground(new java.awt.Color(0, 131, 62));
        jLabel36.setText("Cara Bayar :");
        jLabel36.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        jLabel36.setPreferredSize(new java.awt.Dimension(20, 14));
        jPanel2.add(jLabel36);
        jLabel36.setBounds(20, 310, 220, 40);

        pilihDokter.setForeground(new java.awt.Color(0, 131, 62));
        pilihDokter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48x48/pilih.png"))); // NOI18N
        pilihDokter.setMnemonic('S');
        pilihDokter.setToolTipText("Alt+S");
        pilihDokter.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        pilihDokter.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        pilihDokter.setPreferredSize(new java.awt.Dimension(300, 45));
        pilihDokter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pilihDokterActionPerformed(evt);
            }
        });
        jPanel2.add(pilihDokter);
        pilihDokter.setBounds(775, 270, 50, 40);

        dokterTujuan.setEditable(false);
        dokterTujuan.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        dokterTujuan.setPreferredSize(new java.awt.Dimension(72, 28));
        jPanel2.add(dokterTujuan);
        dokterTujuan.setBounds(255, 270, 520, 40);

        labelNamaPasien.setForeground(new java.awt.Color(0, 131, 62));
        labelNamaPasien.setText("Nama :");
        labelNamaPasien.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        labelNamaPasien.setPreferredSize(new java.awt.Dimension(20, 14));
        jPanel2.add(labelNamaPasien);
        labelNamaPasien.setBounds(20, 90, 220, 40);

        namaPasien.setForeground(new java.awt.Color(0, 131, 62));
        namaPasien.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        namaPasien.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        namaPasien.setPreferredSize(new java.awt.Dimension(20, 14));
        jPanel2.add(namaPasien);
        namaPasien.setBounds(255, 90, 590, 40);

        labelTglLahir.setForeground(new java.awt.Color(0, 131, 62));
        labelTglLahir.setText("Tgl. Lahir :");
        labelTglLahir.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        labelTglLahir.setPreferredSize(new java.awt.Dimension(20, 14));
        jPanel2.add(labelTglLahir);
        labelTglLahir.setBounds(20, 130, 220, 40);

        tglLahir.setForeground(new java.awt.Color(0, 131, 62));
        tglLahir.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        tglLahir.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        tglLahir.setPreferredSize(new java.awt.Dimension(20, 14));
        jPanel2.add(tglLahir);
        tglLahir.setBounds(255, 130, 590, 40);

        tglPeriksa.setForeground(new java.awt.Color(0, 131, 62));
        tglPeriksa.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        tglPeriksa.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        tglPeriksa.setPreferredSize(new java.awt.Dimension(20, 14));
        jPanel2.add(tglPeriksa);
        tglPeriksa.setBounds(255, 190, 590, 40);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel3.setBackground(new java.awt.Color(238, 238, 255));
        jPanel3.setPreferredSize(new java.awt.Dimension(615, 200));

        simpan.setForeground(new java.awt.Color(0, 131, 62));
        simpan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48x48/konfirmasi.png"))); // NOI18N
        simpan.setMnemonic('S');
        simpan.setText("KONFIRMASI");
        simpan.setToolTipText("Alt+S");
        simpan.setFont(new java.awt.Font("Inter", 1, 18)); // NOI18N
        simpan.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        simpan.setIconTextGap(5);
        simpan.setPreferredSize(new java.awt.Dimension(300, 45));
        simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanActionPerformed(evt);
            }
        });
        jPanel3.add(simpan);

        batal.setForeground(new java.awt.Color(0, 131, 62));
        batal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48x48/reset.png"))); // NOI18N
        batal.setMnemonic('K');
        batal.setText("BATAL");
        batal.setToolTipText("Alt+K");
        batal.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        batal.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        batal.setIconTextGap(5);
        batal.setPreferredSize(new java.awt.Dimension(300, 45));
        batal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batalActionPerformed(evt);
            }
        });
        jPanel3.add(batal);

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void batalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batalActionPerformed
        dispose();
    }//GEN-LAST:event_batalActionPerformed

    private void simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanActionPerformed
        if (noRM.getText().isBlank()) {
            JOptionPane.showMessageDialog(rootPane, "No. RM Kosong..!!");
        } else if (kodePoli.isBlank()) {
            JOptionPane.showMessageDialog(rootPane, "Pilih poli terlebih dahulu..!!");
        } else if (kodeDokter.isBlank()) {
            JOptionPane.showMessageDialog(rootPane, "Pilih Dokter terlebih dahulu..!!");
        } else if (query.cariIntegerSmc("select count(*) from reg_periksa where kd_pj = 'A09' and no_rkm_medis = ? and tgl_registrasi = current_date() and kd_poli = ? and kd_dokter = ?", noRM.getText(), kodePoli, kodeDokter) > 0) {
            JOptionPane.showMessageDialog(rootPane, "Maaf, anda sudah terdaftar pada hari ini dengan dokter dan poli yang sama..!!");
        } else if (query.cariIntegerSmc("select count(*) from reg_periksa join kamar_inap on reg_periksa.no_rawat = kamar_inap.no_rawat where kamar_inap.stts_pulang = '-' and reg_periksa.no_rkm_medis = ?", noRM.getText()) > 0) {
            JOptionPane.showMessageDialog(rootPane, "Maaf, pasien sedang dalam masa perawatan di rawat inap..!!");
        } else {
            autoNomorRegistrasi();
            setStatusPasien();
            if (registerPasien()) {
                updateUmurPasien();
                cetakRegistrasi();
                JOptionPane.showMessageDialog(rootPane, "Berhasil!");
            }
            resetForm();
            dispose();
        }
    }//GEN-LAST:event_simpanActionPerformed

    private void pilihPoliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pilihPoliActionPerformed
        poli.tampil(hari);
        poli.setSize(jPanel1.getWidth() - 50, jPanel1.getHeight() - 50);
        poli.setLocationRelativeTo(jPanel2);
        poli.setVisible(true);
    }//GEN-LAST:event_pilihPoliActionPerformed

    private void pilihDokterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pilihDokterActionPerformed
        dokter.tampil(hari, kodePoli);
        dokter.setSize(jPanel1.getWidth() - 50, jPanel1.getHeight() - 50);
        dokter.setLocationRelativeTo(jPanel2);
        dokter.setVisible(true);
    }//GEN-LAST:event_pilihDokterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            DlgRegistrasiWalkIn dialog = new DlgRegistrasiWalkIn(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private component.Button batal;
    private widget.ComboBox caraBayar;
    private widget.TextBox dokterTujuan;
    private component.Label jLabel31;
    private component.Label jLabel32;
    private component.Label jLabel36;
    private component.Panel jPanel1;
    private component.Panel jPanel2;
    private javax.swing.JPanel jPanel3;
    private component.Label labelNamaPasien;
    private component.Label labelNoRM;
    private component.Label labelTglLahir;
    private component.Label labelTglPeriksa;
    private component.Label namaPasien;
    private component.Label noRM;
    private component.Button pilihDokter;
    private component.Button pilihPoli;
    private widget.TextBox poliTujuan;
    private component.Button simpan;
    private component.Label tglLahir;
    private component.Label tglPeriksa;
    // End of variables declaration//GEN-END:variables

    public void tampil(String input) {
        noRM.setText(input);
        switch (Calendar.getInstance().get(Calendar.DAY_OF_WEEK)) {
            case 1: hari = "AKHAD"; break;
            case 2: hari = "SENIN"; break;
            case 3: hari = "SELASA"; break;
            case 4: hari = "RABU"; break;
            case 5: hari = "KAMIS"; break;
            case 6: hari = "JUMAT"; break;
            case 7: hari = "SABTU"; break;
            default: break;
        }
        try (PreparedStatement ps = koneksi.prepareStatement("select nm_pasien, tgl_lahir from pasien where no_rkm_medis = ?")) {
            ps.setString(1, noRM.getText());
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    namaPasien.setText(rs.getString("nm_pasien"));
                    tglLahir.setText(formatTanggal(rs.getString("tgl_lahir")));
                }
            }
        } catch (Exception e) {
            System.out.println("Notif : " + e);
            JOptionPane.showMessageDialog(rootPane, "Terjadi kesalahan pada saat menarik data pasien!\nSilahkan hubungi administrasi!");
        }
    }
    
    private String formatTanggal(String tanggal) {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate ld = LocalDate.parse(tanggal, dtf);
        return ld.format(DateTimeFormatter.ofPattern("dd MMMM yyyy").withLocale(new Locale("ine", "id")));
    }
    
    private void setStatusPasien() {
        if (query.cariIntegerSmc("select count(*) from reg_periksa where no_rkm_medis = ? and kd_poli = ?", noRM.getText(), kodePoli) > 0) {
            statusPoli = "Lama";
            biaya = query.cariIsiSmc("select registrasilama from poliklinik where kd_poli = ? and status = '1'", kodePoli);
        } else {
            biaya = query.cariIsiSmc("select registrasi from poliklinik where kd_poli = ? and status = '1'", kodePoli);
        }
        try (PreparedStatement ps = koneksi.prepareStatement("select pasien.nm_pasien, concat_ws(', ', pasien.alamat, kelurahan.nm_kel, kecamatan.nm_kec, kabupaten.nm_kab) as alamat, pasien.tgl_lahir, pasien.namakeluarga, pasien.keluarga, pasien.kd_pj, " +
            "if (pasien.tgl_daftar = current_date(), 'baru', 'lama') as daftar, timestampdiff(year, pasien.tgl_lahir, curdate()) as tahun, timestampdiff(month, pasien.tgl_lahir, curdate()) - ((timestampdiff(month, pasien.tgl_lahir, curdate()) div 12) * 12) as bulan, " +
            "timestampdiff(day, date_add(date_add(pasien.tgl_lahir, interval timestampdiff(year, pasien.tgl_lahir, curdate()) year), interval timestampdiff(month, pasien.tgl_lahir, curdate()) - ((timestampdiff(month, pasien.tgl_lahir, curdate()) div 12) * 12) month), curdate()) as hari " +
            "from pasien join kelurahan on pasien.kd_kel = kelurahan.kd_kel join kecamatan on pasien.kd_kec = kecamatan.kd_kec join kabupaten on pasien.kd_kab = kabupaten.kd_kab where pasien.no_rkm_medis = ?"
        )) {
            ps.setString(1, noRM.getText());
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    namaPasien.setText(rs.getString("nm_pasien"));
                    tglLahir.setText(rs.getString("tgl_lahir"));
                    namaPJ = rs.getString("namakeluarga");
                    hubunganPJ = rs.getString("keluarga");
                    alamat = rs.getString("alamat");
                    statusDaftar = rs.getString("daftar");
                    if (rs.getInt("tahun") > 0) {
                        umur = rs.getString("tahun");
                        statusUmur = "Th";
                    } else if (rs.getInt("tahun") == 0 && rs.getInt("bulan") > 0) {
                        umur = rs.getString("bulan");
                        statusUmur = "Bl";
                    } else if (rs.getInt("tahun") == 0 && rs.getInt("bulan") == 0) {
                        umur = rs.getString("hari");
                        statusUmur = "Hr";
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Notif : " + e);
        }
    }

    private void updateUmurPasien() {
        query.mengupdateSmc("pasien",
            "umur = CONCAT(CONCAT(CONCAT(TIMESTAMPDIFF(YEAR, tgl_lahir, CURDATE()), ' Th '), CONCAT(TIMESTAMPDIFF(MONTH, tgl_lahir, CURDATE()) - ((TIMESTAMPDIFF(MONTH, tgl_lahir, CURDATE()) div 12) * 12), ' Bl ')), CONCAT(TIMESTAMPDIFF(DAY, DATE_ADD(DATE_ADD(tgl_lahir, INTERVAL TIMESTAMPDIFF(YEAR, tgl_lahir, CURDATE()) YEAR), INTERVAL TIMESTAMPDIFF(MONTH, tgl_lahir, CURDATE()) - ((TIMESTAMPDIFF(MONTH, tgl_lahir, CURDATE()) div 12) * 12) MONTH), CURDATE()), ' Hr'))",
            "no_rkm_medis = ?", noRM.getText()
        );
    }

    private void autoNomorRegistrasi() {
        switch (koneksiDB.URUTNOREG()) {
            case "poli": noReg = query.cariIsiSmc("select lpad(ifnull(max(convert(no_reg, signed)), 0) + 1, 3, '0') from reg_periksa where kd_poli = ? and tgl_registrasi = current_date()", kodePoli); break;
            case "dokter": noReg = query.cariIsiSmc("select lpad(ifnull(max(convert(no_reg, signed)), 0) + 1, 3, '0') from reg_periksa where kd_dokter = ? and tgl_registrasi = current_date()", kodePoli); break;
            case "dokter + poli": noReg = query.cariIsiSmc("select lpad(ifnull(max(convert(no_reg, signed)), 0) + 1, 3, '0') from reg_periksa where kd_poli = ? and kd_dokter = ? and tgl_registrasi = current_date()", kodePoli, kodeDokter); break;
            default: noReg = query.cariIsiSmc("select lpad(ifnull(max(convert(no_reg, signed)), 0) + 1, 3, '0') from reg_periksa where kd_poli = ? and kd_dokter = ? and tgl_registrasi = current_date()", kodePoli, kodeDokter); break;
        }
        noRawat = query.cariIsiSmc("select concat(date_format(current_date(), '%Y/%m/%d'), '/', lpad(ifnull(max(convert(right(no_rawat, 6), signed)), 0) + 1, 6, '0')) from reg_periksa where tgl_registrasi = current_date()");
    }

    private boolean registerPasien() {
        int coba = 0, maxCoba = 5;
        boolean sukses = query.menyimpantfSmc("reg_periksa", null,
            noReg, noRawat, query.cariIsiSmc("select current_date()"), query.cariIsi("select current_time()"), kodeDokter, noRM.getText(),
            kodePoli, namaPJ, alamat, hubunganPJ, biaya, "Belum", statusDaftar, "Ralan", "A09", umur, statusUmur, "Belum Bayar", statusPoli);
        while (coba < maxCoba && ! sukses) {
            autoNomorRegistrasi();
            sukses = query.menyimpantfSmc("reg_periksa", null,
                noReg, noRawat, query.cariIsiSmc("select current_date()"), query.cariIsi("select current_time()"), kodeDokter, noRM.getText(),
                kodePoli, namaPJ, alamat, hubunganPJ, biaya, "Belum", statusDaftar, "Ralan", "A09", umur, statusUmur, "Belum Bayar", statusPoli);
            coba++;
        }
        return sukses;
    }
    
    private void cetakRegistrasi() {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        Map<String, Object> param = new HashMap<>();
        param.put("namars", query.cariIsiSmc("select nama_instansi from setting"));
        param.put("alamatrs", query.cariIsiSmc("select alamat_instansi from setting"));
        param.put("kotars", query.cariIsiSmc("select kabupaten from setting"));
        param.put("kontakrs", query.cariIsiSmc("select kontak from setting"));
        param.put("norawat", noRawat);
        valid.printReport("rptBuktiRegisterAPM.jasper", koneksiDB.PRINTER_REGISTRASI(), "::[ Bukti Registrasi 1 ]::", 1, param);
        valid.MyReport("rptBuktiRegisterAPM.jasper", "report", "::[ Bukti Registrasi 1 ]::", param);
        valid.printReport("rptBarcodeRawatAPM.jasper", koneksiDB.PRINTER_BARCODE(), "::[ Barcode Perawatan ]::", 3, param);
        valid.MyReport("rptBarcodeRawatAPM.jasper", "report", "::[ Barcode Perawatan ]::", param);
        this.setCursor(Cursor.getDefaultCursor());
    }
    
    private void resetForm() {
        noRM.setText("");
        namaPasien.setText("");
        tglLahir.setText("");
        tglPeriksa.setText(formatTanggal(new SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())));
        poliTujuan.setText("");
        dokterTujuan.setText("");
        caraBayar.setSelectedIndex(0);
        
        hari = "";
        noRawat = "";
        noReg = "";
        kodeDokter = "";
        kodePoli = "";
        biaya = "";
        statusDaftar = "Lama";
        statusPoli = "Baru";
        umur = "0";
        statusUmur = "Th";
        namaPJ = "-";
        hubunganPJ = "-";
        alamat = "-";
    }
}
